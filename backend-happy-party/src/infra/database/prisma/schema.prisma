generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(uuid())
  name       String
  email      String
  password   String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  party      Party[]

  @@index([email])
  @@map("users")
}

model Party {
  id          String   @id @default(uuid())
  name        String
  description String
  date        DateTime
  banner      String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  user_id String
  user    User   @relation(fields: [user_id], references: [id])

  list_presents ListPresents?
  married       Married?
  birthdays     BirthDays?
  typePartyId   String?
  typeParty     TypeParty?    @relation(fields: [typePartyId], references: [id])

  @@map("parties")
}

model TypeParty {
  id         String   @id @default(uuid())
  name       String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  Party      Party[]

  @@map("type_parties")
}

model ListPresents {
  id                       String                     @id @default(uuid())
  name                     String
  created_at               DateTime                   @default(now())
  updated_at               DateTime                   @updatedAt
  party                    Party                      @relation(fields: [party_id], references: [id])
  party_id                 String                     @unique
  ListPresentOnPresentsHot ListPresentOnPresentsHot[]

  @@map("list_presents")
}

model ListPresentOnPresentsHot {
  list_present_id String
  list_present    ListPresents @relation(fields: [list_present_id], references: [id])
  present_hot_id  String
  present_hot     PresentsHot  @relation(fields: [present_hot_id], references: [id])
  assingnedAt     DateTime     @default(now())
  assignedBy      String

  @@id([list_present_id, present_hot_id])
  @@map("list_present_on_presents_hot")
}

model PresentsHot {
  id                       String                     @id @default(uuid())
  name                     String
  image                    String
  url_sailers              String
  price                    Decimal                    @default(0) @db.Decimal(10, 2)
  created_at               DateTime                   @default(now())
  updated_at               DateTime                   @updatedAt
  listPresentOnPresentsHot ListPresentOnPresentsHot[]

  @@map("presents_hot")
}

model Married {
  id         String   @id @default(uuid())
  name       String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  party      Party?   @relation(fields: [party_id], references: [id])
  party_id   String?  @unique

  @@map("married")
}

model BirthDays {
  id         String   @id @default(uuid())
  name       String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  party      Party?   @relation(fields: [party_id], references: [id])
  party_id   String?  @unique

  @@map("birth_days")
}
